Задачу "Канадский кроссворд" можно разбить на два модуля:
модуль логики и модуль отображения. +
Модуль отображения использует классы модуля логики. +
Полная диаграмма классов проекта выглядит так:

[plantuml, diagram-classes, png]     
----
package Logick {
	class Configurator {
		-int[2] size
		-Map<String, String> dictionary
		-int[][2] restrictions
		-CrosswordData cwData
		-CrosswordValidator cwValidator
		__
		..getters and setters..
		+int[2] getSize()
		+void setSize(int w, int h)
		+Map<String, String> getDictionary()
		+void setDictionary(Map<String, String> dict)
		+int[][2] getRestrictions()
		+void setRestrictions(int[][] restrictions)
		~CrosswordData getCrosswordData()
		+CrosswordValidator getCrosswordValidator()
		..methods..
		+CrosswordData buildCrossword()
	}
	
	class CrosswordValidator {
		-Configurator configurator
		+ConfigurationErrors getConfigurationErrors()
		+String checkSolution(CrosswordData newSolution)
	}
	
	enum ConfigurationErrors {
		+SizeError
		+DictionaryError
		+RestrictionError
		-String value
		+String getValue()
	}
	
	class Cell {
		-char symbol
		-boolean restricted
		+char getSymbol()
		+void setSymbol(char c)
		+boolean isRestricted()
		+void setRestricted(boolean restricted)
	}
	
	class CrosswordData {
		-Cell[][] data
		+Cell get(int x, int y)
		+void set(int x, int y, char c)
	}
	
	CrosswordData o-- Cell
	CrosswordValidator --> ConfigurationErrors
	CrosswordValidator --> CrosswordData
	Configurator o--> CrosswordValidator
	Configurator o--> CrosswordData
}

package View {
	interface Command {
		+void execute(Object[] params)
	}
	
	class ConfigurationCommand {
		-Configurator configurator
		-void configureDict()
		-void configureSize()
		-void configureRestrictions()
		-void configure()
		-void printHint()		
	}
	
	class SolveCommand {
		-CrosswordData data
		-CrosswordValidator validator
		-Map<String, String> crosswordDict
		-void printCrossword()
		-void printDict()
		-void printHint()
		-void printResult()
	}
	
	class ConsoleManager {
	}
	
	interface ConsoleReader {
		+String readLine()
	}
	
	interface ConsoleWriter {
		+void write(String data)
		+void writeln(String data)
		+void printCrossword(CrosswordData data)
	}
	
	class CrosswordView {
		-Map<Integer, Command> commands
		-Configurator configurator
		-CrosswordData crosswordData
		+void main(String[] args)
	}
	
	SolveCommand ..|> Command
	SolveCommand --> ConsoleManager
	SolveCommand o--> CrosswordData
	SolveCommand o--> CrosswordValidator
	ConsoleWriter --> CrosswordData
	ConfigurationCommand ..|> Command
	ConfigurationCommand --> ConsoleManager
	ConfigurationCommand --> Configurator
	ConsoleManager ..|> ConsoleReader 
	ConsoleManager ..|> ConsoleWriter 
	CrosswordView o-- Command
	CrosswordView o-- Configurator
	CrosswordView o-- CrosswordData
	CrosswordView --> ConsoleManager
}
----

Рассмотрим подробнее. Начнём с модуля логики (`Logick`). +

Класс ячейки кроссворда - `Cell` - хранит информацию о состоянии ячейки. 
Характеристики ячейки: хранимый символ (может быть цифра, буква, символ ограничения). +

Класс `CrosswordData` хранит данные о содержании кроссворда: о каждой его ячейки и её характеристиках. +

Класс `CrosswordValidator` используется для проверки кроссворда на корректность, а также для проверки решенного кроссворда.
Для этих целей он хранит в себе ссылку на `Configurator`, чтобы получить настройки кроссворда (размер, слова и пр) и проверить,
конфликтуют ли эти параметры между собой (например, не должно быть слов, которые не могут поместиться в указанный размер кроссворда).
В качестве результата проверки возвращает список ошибок - список объектов перечисления `ConfigurationErrors`.
Также с помощью того же `Configurator` он получает доступ к оригинальному нерешённому кроссворду, позволяя сравнить его с
решённым пользователем - проверить.

Перечисление `ConfigurationErrors` хранит в себе возможные ошибки (конфликты) настройки кроссворда. Каждый объект перечисления 
имеет строковое представление ошибки для вывода пользователю.

Класс конфигуратора - `Configurator` - самый главный класс этого модуля. Он хранит в себе множество данных кроссворда. 
Ответственен за генерацию кроссворда. Этот класс подробнее:
[plantuml, diagram-classes, png]  
----
class Configurator {
	-int[2] size
	-Map<String, String> dictionary
	-int[][2] restrictions
	-CrosswordData cwData
	-CrosswordValidator cwValidator
	__
	..getters and setters..
	+int[2] getSize()
	+void setSize(int w, int h)
	+Map<String, String> getDictionary()
	+void setDictionary(Map<String, String> dict)
	+int[][2] getRestrictions()
	+void setRestrictions(int[][] restrictions)
	~CrosswordData getCrosswordData()
	+CrosswordValidator getCrosswordValidator()
	..methods..
	+CrosswordData buildCrossword()
}
----
Как мы можем видеть - среди геттеров и сеттеров нет сеттеров для `CrosswordData` и для `CrosswordValidator`.
Валидатор создаётся при создании конфигуратора. А данные поля кроссворда создаются методом `buildCrossword()`.
Этот метод в течение минуты генерирует кроссворд - в конце создаётся объект `CrosswordData`. Он возвращается
из метода как результат, но перед этим его решённая копия сохраняется внутри конфигуратора. Таким образом
конфигуратор всегда имеет ссылку на правильное решение.

Перейдём теперь к модулю отображения (`View`):

Этот модуль ответственен за ввод и вывод информации, за взаимодействие пользователя и кроссворда.
Он имеет следующие классы:

Классы взаимодействия с вводом-выводом:

[plantuml, diagram-classes, png]  
----
class ConsoleManager {
}

interface ConsoleReader {
	+String readLine()
}

interface ConsoleWriter {
	+void write(String data)
	+void writeln(String data)
	+void printCrossword(CrosswordData data)
}

ConsoleManager ..|> ConsoleReader 
ConsoleManager ..|> ConsoleWriter 
----
Позволяют выводить различную информацию в консоль и считывать её.

Главным классом данного модуля ясляется класс `CrosswordView`. 

NOTE: Класс `CrosswordView` является стартовым классом в проекте.

Этот класс обращается к консоли и считывает цифры 1|2, чтобы играть/настроить кроссврод.

Через эти цифры он образается к той или иной команде - имплементации интерфейса `Command`:

[plantuml, diagram-classes, png]  
----
interface Command {
	+void execute(Object[] params)
}

class ConfigurationCommand {
	-Configurator configurator
	-void configureDict()
	-void configureSize()
	-void configureRestrictions()
	-void configure()
	-void printHint()		
}

class SolveCommand {
	-CrosswordData data
	-CrosswordValidator validator
	-Map<String, String> crosswordDict
	-void printCrossword()
	-void printDict()
	-void printHint()
	-void printResult()
}

SolveCommand ..|> Command
ConfigurationCommand ..|> Command
----

Класс `ConfigurationCommand` имеет доступ к конфигуратору. Взаимодействуя с консолью, он добавляет в конфигуратор данные.
В случае, если в конце настройки данные будут подходящие, он сгенерирует кроссворд (иначе - повторит цикл настройки).

Класс `SolveCommand` обеспечивает процесс решения кроссворда - считывание данных с клавиатуры (используя классы работы с консолью),
печать текущего состояния кроссворда.

По завершении ввода он проверяет правильность решения кроссворда (через валидатор) и выводит результат.